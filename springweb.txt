public List<HeroEntity> myHeroes = null;


    @GetMapping
    public List<HeroEntity> getHeroes(){
//        System.out.println(111);
        myHeroes = initHeroes(myHeroes);
//        System.out.println(myHeroes);
        return myHeroes;
    }

    @GetMapping("{id}")
    public HeroEntity getHero(@PathVariable int id){
        initHeroes(myHeroes);

        HeroEntity returnHero = null;
        for (HeroEntity hero: myHeroes) {
            if(hero.getId() == id){
                returnHero = hero;
            }
        }
        if (returnHero != null) {
            return returnHero;
        }else {
            return null;
        }
    }

    @GetMapping("search")
    public List<HeroEntity> searchHero(@RequestParam String name){
        System.out.println(name);
        initHeroes(myHeroes);
//        System.out.println(myHeroes);
        List<HeroEntity> returnHeroes = new ArrayList<HeroEntity>();
        for (int i = 0; i < myHeroes.size(); i++) {
            String pattern = ".*"+name + ".*";
            boolean isMatch = Pattern.matches(pattern, myHeroes.get(i).getName());
            System.out.println(myHeroes.get(i).getName());
            System.out.println(isMatch);
            if(isMatch) {
                returnHeroes.add(myHeroes.get(i));
            }
        }
        return returnHeroes;
    }

    @PostMapping
    public HeroEntity addHero(@RequestBody HeroEntity hero){
        initHeroes(myHeroes);
        HeroEntity returnHero = null;
        boolean addFlag = true;
        for (int i = 0; i < myHeroes.size(); i++) {
            if(myHeroes.get(i).getId() == hero.getId()){
                addFlag = false;
                returnHero = myHeroes.get(i);
            }
        }
        if (addFlag){
            myHeroes.add(hero);
            return hero;
        }
        return returnHero;
    }

    @PutMapping
    public HeroEntity updateHero(@RequestBody HeroEntity hero) {
        initHeroes(myHeroes);

        HeroEntity returnHero = null;
        for (int i = 0; i < myHeroes.size(); i++) {
            if(myHeroes.get(i).getId() == hero.getId()){
                myHeroes.get(i).setName(hero.getName());
                returnHero = myHeroes.get(i);
            }
        }
//        缺少索引，使用fori替换
//        for (HeroEntity myhero: myHeroes) {
//            if(myhero.getId() == hero.getId()){
//                myHeroes.get(myhero.getId()-11).setName(hero.getName());
//                returnHero = myHeroes.get(myhero.getId()-11);
//            }
//        }
//        冗余的判断，使用return替换
//        if (returnHero != null) {
//            return returnHero;
//        }else {
//            return null;
//        }
        return returnHero;
    }

    @DeleteMapping("{id}")
    public HeroEntity deleteHero(@PathVariable int id) {
        initHeroes(myHeroes);

        HeroEntity returnHero = null;
        for (int i = 0; i < myHeroes.size(); i++) {
            if(myHeroes.get(i).getId() == id){

                returnHero = myHeroes.remove(i);
            }
        }
        return returnHero;
    }




    private List<HeroEntity> initHeroes(List<HeroEntity> myHeroes) {
        if (myHeroes == null) {
//            System.out.println(2222);
            myHeroes = new ArrayList<HeroEntity>();
            myHeroes.add(new HeroEntity(11,"Dr Nice"));
            myHeroes.add(new HeroEntity(12,"Narco"));
            myHeroes.add(new HeroEntity(13,"Bombasto"));
            myHeroes.add(new HeroEntity(14,"Celeritas"));
            myHeroes.add(new HeroEntity(15,"Magneta"));
            myHeroes.add(new HeroEntity(16,"RubberMan"));
            myHeroes.add(new HeroEntity(17,"Dynama"));
            myHeroes.add(new HeroEntity(18,"Dr IQ"));
            myHeroes.add(new HeroEntity(19,"Magma"));
            myHeroes.add(new HeroEntity(20,"Tornado"));
//            System.out.println(myHeroes);
            return myHeroes;
        }
        return myHeroes;

    }


spring.datasource.url = jdbc:mysql://localhost:3306/spring_web_and_jpa
spring.jpa.properties.hibernate.jdbc.time_zone=Asia/Shanghai
spring.datasource.username = root
spring.datasource.password = root
spring.datasource.driverClassName = com.mysql.jdbc.Driver
# Specify the DBMS
spring.jpa.database = MYSQL
# Show or not log for each sql query
spring.jpa.show-sql = true
# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update
# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
# stripped before adding them to the entity manager)
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect


repositories {  
    mavenLocal()
    maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
    mavenCentral()
}